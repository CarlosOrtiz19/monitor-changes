[{"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\index.js":"1","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\App.js":"3","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\NavBarDrawer.js":"4","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Router.js":"5","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Home.js":"6","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\ShowWebPage.js":"7","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\MonitorByEmail.js":"8","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImageV2.js":"9","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CardTemplate.js":"10","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Service\\JsoupService.js":"11","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ShowImage.js":"12","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ShowDetails.js":"13","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImage.js":"14","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ProgressIndicator.js":"15","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Cards.js":"16"},{"size":526,"mtime":1620664869376,"results":"17","hashOfConfig":"18"},{"size":415,"mtime":1620664869377,"results":"19","hashOfConfig":"18"},{"size":404,"mtime":1620664869363,"results":"20","hashOfConfig":"18"},{"size":5946,"mtime":1620664869369,"results":"21","hashOfConfig":"18"},{"size":691,"mtime":1620664869371,"results":"22","hashOfConfig":"18"},{"size":145,"mtime":1620664869367,"results":"23","hashOfConfig":"18"},{"size":3947,"mtime":1620704992689,"results":"24","hashOfConfig":"18"},{"size":2198,"mtime":1620702625366,"results":"25","hashOfConfig":"18"},{"size":5236,"mtime":1620701434873,"results":"26","hashOfConfig":"18"},{"size":4319,"mtime":1620702752587,"results":"27","hashOfConfig":"18"},{"size":1840,"mtime":1620707563141,"results":"28","hashOfConfig":"18"},{"size":816,"mtime":1620702458559,"results":"29","hashOfConfig":"18"},{"size":3587,"mtime":1620707722841,"results":"30","hashOfConfig":"18"},{"size":4554,"mtime":1620664869366,"results":"31","hashOfConfig":"18"},{"size":197,"mtime":1614954511597,"results":"32","hashOfConfig":"18"},{"size":2467,"mtime":1620664869366,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"5haxmg",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\index.js",[],["74","75"],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\App.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\NavBarDrawer.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Router.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Home.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\ShowWebPage.js",["76","77","78","79","80"],"import JsoupService from '../Service/JsoupService'\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {TextField, Button, Typography, Grid} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport ProgressIndicator from '../Utils/ProgressIndicator';\r\nimport CropImage from './CropImage';\r\nimport CropImageV2 from './CropImageV2';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        width: \"75%\",\r\n        // marginLeft: theme.spacing(5),\r\n        // marginRight: theme.spacing(5),\r\n        // padding: theme.spacing(5),\r\n        margin: 'auto',\r\n        variant: 'outlined'\r\n        //talla papel\r\n\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '100ch',\r\n    },\r\n}));\r\n\r\nexport default function ShowWebPage(props) {\r\n    const classes = useStyles();\r\n    const [screenShot, setscreenShot] = useState(null)\r\n    const [url, setUrl] = useState(null)\r\n    const [isLoading, setisLoading] = useState(true)\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    const takeScreenShot = (_url) => {\r\n        setisLoading(!isLoading)\r\n        console.log(\"isloading\")\r\n        console.log(isLoading)\r\n        axios.get(\"http://localhost:4000/screenshot?url=\" + url, {responseType: \"blob\"})\r\n            .then(function (response) {\r\n                var reader = new window.FileReader();\r\n                reader.readAsDataURL(response.data);\r\n                reader.onload = function () {\r\n                    var imageDataUrl = reader.result;\r\n                    setscreenShot(imageDataUrl)\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        takeScreenShot(url);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Paper className={classes.paper}>\r\n                <Grid container\r\n                      direction=\"column\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\">\r\n\r\n\r\n                    <Grid item xs={12}>\r\n                        <Typography>\r\n                            1. Insérez l'url que vous souhaitez surveiller\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} spacing={3}>\r\n                        <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                            <TextField id=\"outlined-size-normal\"\r\n                                       className={classes.textField}\r\n                                       label=\"Url\"\r\n                                       variant=\"outlined\"\r\n                                       onChange={e => setUrl(e.target.value)}/>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={takeScreenShot}>\r\n                                Commencer\r\n                            </Button>\r\n                        </form>\r\n                    </Grid>\r\n\r\n\r\n                    <LinearProgress variant=\"determinate\" value={progress}/>\r\n\r\n\r\n                    {screenShot &&\r\n                    <>\r\n                        <Grid item xs={12}>\r\n                            <Typography>\r\n                                2. Sélectionner la zone\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}/>\r\n                        <CropImageV2 src={screenShot} url={url}/>\r\n                        <Grid/>\r\n                    </>\r\n                    }\r\n\r\n                </Grid>\r\n\r\n            </Paper>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\MonitorByEmail.js",["81","82","83","84"],"import React, {useEffect, useState} from \"react\";\r\nimport {TextField, makeStyles, Paper, Button, Typography, Grid} from '@material-ui/core';\r\nimport CardTemplate from './CardTemplate'\r\nimport JsoupService from \"../Service/JsoupService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {},\r\n    paper: {\r\n        marginTop: '0px',\r\n        width: \"75%\",\r\n        //marginLeft: theme.spacing(10),\r\n        //marginRight: theme.spacing(5),\r\n        padding: theme.spacing(2),\r\n        margin: 'auto',\r\n        variant: 'outlined'\r\n        //talla papel\r\n    },\r\n    textField: {\r\n        padding: theme.spacing(5),\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '100ch',\r\n    },\r\n}));\r\n\r\nexport default function MonitorByEmail() {\r\n    const classes = useStyles();\r\n    const [email, setemail] = useState(\"\")\r\n    const [monitors, setmonitors] = useState([])\r\n\r\n\r\n    const findMonitorsBYemail = async () => {\r\n        const response = await JsoupService.getAllMonitorsByEmail(\"carlos@test\");\r\n        if(response){\r\n            setmonitors(response.data)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        findMonitorsBYemail()\r\n        return () => {\r\n            setmonitors([])\r\n        }\r\n    }, [])\r\n    return (\r\n        <Grid justify=\"center\">\r\n            <Paper className={classes.paper}>\r\n                <TextField id=\"outlined-size-normal\"\r\n                           className={classes.textField}\r\n                           label=\"Email\"\r\n                           placeholder=\"insert the email to notify\"\r\n                           variant=\"outlined\"\r\n                    // onChange={e => setEmail(e.target.value)}\r\n                />\r\n\r\n                <Grid container>\r\n\r\n                    {monitors.length && monitors.map(data =>\r\n                        <Grid item key={data.id}>\r\n                            <CardTemplate monitor={data}/>\r\n                        </Grid>\r\n                    )}\r\n\r\n                </Grid>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImageV2.js",["85","86","87"],"import React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport { TextField, Button, Typography, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport JsoupService from '../Service/JsoupService';\r\n\r\n\r\nfunction generateDownload(canvas, crop) {\r\n    if (!crop || !canvas) {\r\n        return;\r\n    }\r\n\r\n    canvas.toBlob(\r\n        (blob) => {\r\n            const previewUrl = window.URL.createObjectURL(blob);\r\n\r\n            const anchor = document.createElement('a');\r\n            anchor.download = 'cropPreview.png';\r\n            anchor.href = URL.createObjectURL(blob);\r\n            anchor.click();\r\n\r\n            window.URL.revokeObjectURL(previewUrl);\r\n        },\r\n        'image/png',\r\n        1\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        marginLeft: theme.spacing(5),\r\n        marginRight: theme.spacing(5),\r\n        padding: theme.spacing(5),\r\n        margin: 'auto',\r\n        variant: 'outlined'\r\n        //talla papel\r\n\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '100ch',\r\n    },\r\n}));\r\n\r\n\r\nexport default function CropImageV2(props) {\r\n    const classes = useStyles();\r\n    const [upImg] = props.src;\r\n    const imgRef = useRef(null);\r\n    const previewCanvasRef = useRef(null);\r\n    const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\r\n    const [completedCrop, setCompletedCrop] = useState(null);\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n\r\n\r\n    /*const onSelectFile = (e) => {\r\n      if (e.target.files && e.target.files.length > 0) {\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', () => setUpImg(reader.result));\r\n        reader.readAsDataURL(e.target.files[0]);\r\n      }\r\n    };*/\r\n\r\n    const onLoad = useCallback((img) => {\r\n        imgRef.current = img;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n            return;\r\n        }\r\n\r\n        const image = imgRef.current;\r\n        const canvas = previewCanvasRef.current;\r\n        const crop = completedCrop;\r\n\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        const ctx = canvas.getContext('2d');\r\n        const pixelRatio = window.devicePixelRatio;\r\n\r\n        canvas.width = crop.width * pixelRatio;\r\n        canvas.height = crop.height * pixelRatio;\r\n\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = 'high';\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n    }, [completedCrop]);\r\n\r\n    const saveInformation = async () => {\r\n\r\n        await JsoupService.saveInfoCrop(crop, props.url, \"carlos@test\")\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n            <ReactCrop\r\n                src={props.src}\r\n                onImageLoaded={onLoad}\r\n                crop={crop}\r\n                onChange={(c) => setCrop(c)}\r\n                onComplete={(c) => setCompletedCrop(c)}\r\n            />\r\n\r\n            <div>\r\n                <canvas\r\n                    ref={previewCanvasRef}\r\n                    // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\r\n                    style={{\r\n                        //width: 300,\r\n                        height: 300\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <Button\r\n                type=\"button\"\r\n                disabled={!completedCrop?.width || !completedCrop?.height}\r\n                onClick={() =>\r\n                    saveInformation()\r\n                }\r\n            >\r\n                save crop\r\n            </Button>\r\n\r\n            <Button\r\n                type=\"button\"\r\n                disabled={!completedCrop?.width || !completedCrop?.height}\r\n                onClick={() =>\r\n                    generateDownload(previewCanvasRef.current, completedCrop)\r\n                }\r\n            >\r\n                Download cropped image\r\n            </Button>\r\n\r\n            <Grid item xs={12}>\r\n                <Typography>\r\n                    1. Insérez l'url que vous souhaitez surveiller\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <TextField id=\"outlined-size-normal\"\r\n                className={classes.textField}\r\n                label=\"Email\"\r\n                placeholder=\"insert the email to notify\"\r\n                variant=\"outlined\"\r\n                onChange={e => setEmail(e.target.value)} />\r\n\r\n            <TextField id=\"outlined-size-normal\"\r\n                className={classes.textField}\r\n                label=\"Email\"\r\n                placeholder=\"insert the email to notify\"\r\n                variant=\"outlined\"\r\n                onChange={e => setEmail(e.target.value)} />\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CardTemplate.js",["88","89"],"import { Button, CardActionArea, Paper } from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport React, { useState } from \"react\";\r\nimport ShowDetails from \"../Utils/ShowDetails\";\r\nimport ShowImage from \"../Utils/ShowImage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minWidth: 275,\r\n        margin: theme.spacing(2),\r\n        backgroundColor: '#FAF9F8',\r\n    },\r\n    media: {\r\n        //padding: theme.spacing(2),\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    paper: {\r\n        // margin: theme.spacing(1),\r\n\r\n    },\r\n    title: {\r\n        fontSize: 10,\r\n        alignSelf: \"end\",\r\n        textAlign: \"center\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\nexport default function ImageCard(props) {\r\n    const classes = useStyles();\r\n    const [image, setimage] = useState(null)\r\n    const [showImage, setshowImage] = useState(false)\r\n    const [showDetails, setshowDetails] = useState(false)\r\n\r\n\r\n    const showImageFuction = (e) => {\r\n        console.log(showImage)\r\n        setshowImage(true)\r\n    }\r\n\r\n    const showDetailsFunction = (e) => {\r\n        console.log(showDetails)\r\n        setshowDetails(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setshowDetails(false)\r\n        setshowImage(false)\r\n    };\r\n    return (\r\n        <Card className={classes.root} variant=\"outlined\">\r\n\r\n            <CardActionArea>\r\n                <Paper className={classes.paper}>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={`data:image/jpeg;base64,${props.monitor.imageCrop.data}`}\r\n                        onClick={showImageFuction}\r\n                    />\r\n                </Paper >\r\n            </CardActionArea>\r\n\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" align=\"left\">\r\n                    Titre: {props.monitor.email}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" align=\"left\">\r\n                    Date creation: {props.monitor.createDate}\r\n                </Typography>\r\n\r\n            </CardContent>\r\n\r\n            <CardActions>\r\n\r\n\r\n                {showImage &&\r\n                    <ShowImage src={`data:image/jpeg;base64,${props.monitor.imageCrop.data}`} handleClose={handleClose} />\r\n                }\r\n\r\n                <Button \r\n                href=\"#text-buttons\" \r\n                style={{ textTransform: 'none' }}\r\n                color=\"primary\" \r\n                onClick={showDetailsFunction}>Plus de détails\r\n                </Button>\r\n\r\n                {showDetails &&\r\n                    <ShowDetails crop={props.monitor} handleClose={handleClose} />\r\n                }\r\n\r\n\r\n\r\n               \r\n\r\n            </CardActions>\r\n        </Card>\r\n\r\n        // <Card className={classes.root}>\r\n        //     <CardHeader\r\n        //         avatar={\r\n        //             <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n        //                 R\r\n        //             </Avatar>\r\n        //         }\r\n        //         action={\r\n        //             <IconButton aria-label=\"settings\">\r\n        //                 <MoreVertIcon/>\r\n        //             </IconButton>\r\n        //         }\r\n        //         title={props.monitor.imageCrop.name}\r\n        //         subheader={props.monitor.createDate}\r\n\r\n        //     />\r\n        //     <Divider/>\r\n        //     <CardMedia\r\n        //         className={classes.media}\r\n        //         image={`data:image/jpeg;base64,${props.monitor.imageCrop.data}`}\r\n        //         title=\"image\"\r\n        //     />\r\n        //     <Divider/>\r\n\r\n\r\n        //     <CardContent>\r\n        //         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n        //             image to monitoring\r\n        //         </Typography>\r\n        //     </CardContent>\r\n        // </Card>\r\n    );\r\n}","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Service\\JsoupService.js",["90"],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ShowImage.js",["91","92"],"import Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport React from 'react';\r\n\r\nexport default function ShowImage(props) {\r\n  const [open, setOpen] = React.useState(true);\r\n  const [maxWidth, setMaxWidth] = React.useState('sm');\r\n  const [fullWidth, setFullWidth] = React.useState(true);\r\n\r\n  const handleClose = () => {\r\n    props.handleClose();\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n     \r\n      <Dialog\r\n      fullWidth={fullWidth}\r\n        open={open}\r\n        onClose={handleClose}\r\n        maxWidth={maxWidth}\r\n      >\r\n        {props.src && (\r\n          <img src={props.src} alt={props.title} />\r\n        )}\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Fermer\r\n          </Button>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ShowDetails.js",["93","94","95","96"],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImage.js",["97","98","99","100","101","102","103","104"],"import {Button} from '@material-ui/core';\r\nimport React, {useState, useCallback} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport ReactCrop, {makeAspectCrop} from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\nimport ImageCard from './Cards'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nclass CropImage extends React.Component {\r\n\r\n    state = {\r\n        src: null,\r\n        images: [],\r\n        crop: {\r\n            x: 10,\r\n            y: 10,\r\n            width: 100,\r\n            height: 100\r\n        }\r\n    };\r\n\r\n    onSelectFile = (e) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener(\r\n                \"load\",\r\n                () =>\r\n                    this.setState({\r\n                        src: reader.result\r\n                    }),\r\n                false\r\n            );\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    onImageLoaded = (image) => {\r\n        this.imageRef = image;\r\n        console.log(\"onCropComplete\", image);\r\n    };\r\n\r\n    onCropComplete = (crop) => {\r\n        this.makeClientCrop(crop);\r\n        console.log(\"onCropComplete\", crop);\r\n    };\r\n\r\n    showSelections = () => {\r\n        for (let index = 0; index < this.state.images.length; index++) {\r\n            return\r\n        }\r\n    }\r\n\r\n    confirmImage = () => {\r\n        this.state.images.push(this.state.crop);\r\n        console.log(this.state.images.length);\r\n        console.log(this.state.images[this.state.images.length - 1])\r\n        if (this.state.images.length > 1) {\r\n            if (this.state.images[0] === this.state.images[1]) {\r\n                console.log(\"identicals\")\r\n            } else {\r\n                console.log(\"non identicals\")\r\n            }\r\n        }\r\n        return <ImageCard src={this.state.images[0]}/>\r\n    }\r\n\r\n    onCropChange = (crop) => {\r\n        this.setState({crop});\r\n    };\r\n\r\n    async makeClientCrop(crop) {\r\n        if (this.imageRef && crop.width && crop.height) {\r\n            const croppedImageUrl = await this.getCroppedImg(\r\n                this.imageRef,\r\n                crop,\r\n                'newFile.jpeg'\r\n            );\r\n            this.setState({croppedImageUrl});\r\n        }\r\n    }\r\n\r\n    //show image in canvas\r\n    getCroppedImg(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        return new Promise((resolve, reject) => {\r\n            canvas.toBlob(blob => {\r\n                if (!blob) {\r\n                    //reject(new Error('Canvas is empty'));\r\n                    console.error('Canvas is empty');\r\n                    return;\r\n                }\r\n                blob.name = fileName;\r\n                window.URL.revokeObjectURL(this.fileUrl);\r\n                this.fileUrl = window.URL.createObjectURL(blob);\r\n                resolve(this.fileUrl);\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {crop, croppedImageUrl, src} = this.state;\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                {this.props.src && (\r\n                    <ReactCrop\r\n                        src={this.props.src}\r\n                        crop={this.state.crop}\r\n                        ruleOfThirds\r\n                        onImageLoaded={this.onImageLoaded}\r\n                        onComplete={this.onCropComplete}\r\n                        onChange={this.onCropChange}\r\n                        minWidth={500}\r\n                        minHeight={120}\r\n                    />\r\n                )}\r\n\r\n                {croppedImageUrl && (\r\n                    <img alt=\"Crop\" style={{maxWidth: '100%'}} src={croppedImageUrl}/>\r\n                )}\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" disableElevation onClick={this.confirmImage}>\r\n                    confirm\r\n                </Button>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CropImage;\r\n\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ProgressIndicator.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Cards.js",["105","106","107","108","109","110","111","112"],"import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {red} from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n}));\r\n\r\nexport default function ImageCard(props) {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    console.log(props)\r\n\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                        R\r\n                    </Avatar>\r\n                }\r\n                action={\r\n                    <IconButton aria-label=\"settings\">\r\n                        <MoreVertIcon/>\r\n                    </IconButton>\r\n                }\r\n                title=\"image\"\r\n                subheader=\"date image\"\r\n            />\r\n            <CardMedia\r\n                className={classes.media}\r\n\r\n                image={props.src}\r\n                title=\"image\"\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    image to monitoring\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":1,"column":8,"nodeType":"119","messageId":"120","endLine":1,"endColumn":20},{"ruleId":"117","severity":1,"message":"121","line":2,"column":16,"nodeType":"119","messageId":"120","endLine":2,"endColumn":25},{"ruleId":"117","severity":1,"message":"122","line":6,"column":8,"nodeType":"119","messageId":"120","endLine":6,"endColumn":25},{"ruleId":"117","severity":1,"message":"123","line":7,"column":8,"nodeType":"119","messageId":"120","endLine":7,"endColumn":17},{"ruleId":"117","severity":1,"message":"124","line":38,"column":22,"nodeType":"119","messageId":"120","endLine":38,"endColumn":33},{"ruleId":"117","severity":1,"message":"125","line":2,"column":39,"nodeType":"119","messageId":"120","endLine":2,"endColumn":45},{"ruleId":"117","severity":1,"message":"126","line":2,"column":47,"nodeType":"119","messageId":"120","endLine":2,"endColumn":57},{"ruleId":"117","severity":1,"message":"127","line":28,"column":12,"nodeType":"119","messageId":"120","endLine":28,"endColumn":17},{"ruleId":"117","severity":1,"message":"128","line":28,"column":19,"nodeType":"119","messageId":"120","endLine":28,"endColumn":27},{"ruleId":"117","severity":1,"message":"129","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":13},{"ruleId":"117","severity":1,"message":"130","line":53,"column":12,"nodeType":"119","messageId":"120","endLine":53,"endColumn":17},{"ruleId":"117","severity":1,"message":"127","line":59,"column":12,"nodeType":"119","messageId":"120","endLine":59,"endColumn":17},{"ruleId":"117","severity":1,"message":"131","line":40,"column":12,"nodeType":"119","messageId":"120","endLine":40,"endColumn":17},{"ruleId":"117","severity":1,"message":"132","line":40,"column":19,"nodeType":"119","messageId":"120","endLine":40,"endColumn":27},{"ruleId":"117","severity":1,"message":"133","line":17,"column":19,"nodeType":"119","messageId":"120","endLine":17,"endColumn":25},{"ruleId":"117","severity":1,"message":"134","line":7,"column":20,"nodeType":"119","messageId":"120","endLine":7,"endColumn":31},{"ruleId":"117","severity":1,"message":"135","line":8,"column":21,"nodeType":"119","messageId":"120","endLine":8,"endColumn":33},{"ruleId":"136","severity":1,"message":"137","line":12,"column":9,"nodeType":"138","messageId":"139","endLine":12,"endColumn":19},{"ruleId":"117","severity":1,"message":"134","line":34,"column":22,"nodeType":"119","messageId":"120","endLine":34,"endColumn":33},{"ruleId":"117","severity":1,"message":"135","line":35,"column":23,"nodeType":"119","messageId":"120","endLine":35,"endColumn":35},{"ruleId":"140","severity":1,"message":"141","line":52,"column":8,"nodeType":"142","endLine":52,"endColumn":20,"suggestions":"143"},{"ruleId":"117","severity":1,"message":"144","line":2,"column":16,"nodeType":"119","messageId":"120","endLine":2,"endColumn":24},{"ruleId":"117","severity":1,"message":"145","line":2,"column":26,"nodeType":"119","messageId":"120","endLine":2,"endColumn":37},{"ruleId":"117","severity":1,"message":"146","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":16},{"ruleId":"117","severity":1,"message":"147","line":4,"column":20,"nodeType":"119","messageId":"120","endLine":4,"endColumn":34},{"ruleId":"117","severity":1,"message":"148","line":7,"column":8,"nodeType":"119","messageId":"120","endLine":7,"endColumn":12},{"ruleId":"117","severity":1,"message":"149","line":8,"column":8,"nodeType":"119","messageId":"120","endLine":8,"endColumn":13},{"ruleId":"117","severity":1,"message":"150","line":121,"column":16,"nodeType":"119","messageId":"120","endLine":121,"endColumn":20},{"ruleId":"117","severity":1,"message":"151","line":121,"column":39,"nodeType":"119","messageId":"120","endLine":121,"endColumn":42},{"ruleId":"117","severity":1,"message":"152","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":12},{"ruleId":"117","severity":1,"message":"153","line":8,"column":8,"nodeType":"119","messageId":"120","endLine":8,"endColumn":19},{"ruleId":"117","severity":1,"message":"154","line":9,"column":8,"nodeType":"119","messageId":"120","endLine":9,"endColumn":16},{"ruleId":"117","severity":1,"message":"155","line":14,"column":8,"nodeType":"119","messageId":"120","endLine":14,"endColumn":20},{"ruleId":"117","severity":1,"message":"156","line":15,"column":8,"nodeType":"119","messageId":"120","endLine":15,"endColumn":17},{"ruleId":"117","severity":1,"message":"157","line":16,"column":8,"nodeType":"119","messageId":"120","endLine":16,"endColumn":22},{"ruleId":"117","severity":1,"message":"158","line":44,"column":12,"nodeType":"119","messageId":"120","endLine":44,"endColumn":20},{"ruleId":"117","severity":1,"message":"159","line":44,"column":22,"nodeType":"119","messageId":"120","endLine":44,"endColumn":33},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'JsoupService' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ProgressIndicator' is defined but never used.","'CropImage' is defined but never used.","'setProgress' is assigned a value but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'email' is assigned a value but never used.","'setemail' is assigned a value but never used.","'axios' is defined but never used.","'upImg' is assigned a value but never used.","'image' is assigned a value but never used.","'setimage' is assigned a value but never used.","'buffer' is assigned a value but never used.","'setMaxWidth' is assigned a value but never used.","'setFullWidth' is assigned a value but never used.","no-dupe-keys","Duplicate key 'fontWeight'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDetailsByCropId'. Either include it or remove the dependency array.","ArrayExpression",["162"],"'useState' is defined but never used.","'useCallback' is defined but never used.","'ReactDOM' is defined but never used.","'makeAspectCrop' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'crop' is assigned a value but never used.","'src' is assigned a value but never used.","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'FavoriteIcon' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},"Update the dependencies array to be: [getDetailsByCropId, props.crop]",{"range":"165","text":"166"},[1557,1569],"[getDetailsByCropId, props.crop]"]