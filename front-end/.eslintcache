[{"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\index.js":"1","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\App.js":"3","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\NavBarDrawer.js":"4","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\TimeSelector.js":"5","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\UrlInput.js":"6","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\ShowWebPage.js":"7","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\TakeScreenShotPuppeter.js":"8","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImage.js":"9","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImageV2.js":"10","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Service\\JsoupService.js":"11","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ProgressIndicator.js":"12","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Cards.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":407,"mtime":1618198189433,"results":"17","hashOfConfig":"15"},{"size":4863,"mtime":1617691547186,"results":"18","hashOfConfig":"15"},{"size":3021,"mtime":1618199063932,"results":"19","hashOfConfig":"15"},{"size":816,"mtime":1614055131757,"results":"20","hashOfConfig":"15"},{"size":3945,"mtime":1619410215205,"results":"21","hashOfConfig":"15"},{"size":259,"mtime":1614055271632,"results":"22","hashOfConfig":"15"},{"size":3859,"mtime":1617855962461,"results":"23","hashOfConfig":"15"},{"size":4855,"mtime":1619581713800,"results":"24","hashOfConfig":"15"},{"size":1358,"mtime":1619669190503,"results":"25","hashOfConfig":"15"},{"size":197,"mtime":1614954511597,"results":"26","hashOfConfig":"15"},{"size":2195,"mtime":1614963599519,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"5haxmg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\index.js",[],["63","64"],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\App.js",["65","66"],"import logo from './logo.svg';\nimport './App.css';\nimport UrlInput from './components/UrlInput'\nimport ShowWebPage from './components/ShowWebPage'\nimport NavBarDrawer from './components/NavBarDrawer'\nimport TimeSelector from './components/TimeSelector'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    <NavBarDrawer/>\n    <ShowWebPage/>\n    <TimeSelector/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\NavBarDrawer.js",["67"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function PersistentDrawerLeft() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Changes\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {['Create', 'See my pages', 'setting'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        \r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\TimeSelector.js",["68","69","70","71","72","73","74","75","76"],"import React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst minute = [10,20,30,40,50];\r\nconst hours = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];\r\n\r\n\r\nexport default function TimeSelector() {\r\n    const classes = useStyles();\r\n    const [minutes] = useState(minute)\r\n    const [timeTest, settimeTest] = useState(0)\r\n    const [hours, sethour] = useState(0)\r\n    const [day, setday] = useState(0)\r\n\r\n    const handleChange = (event) => {\r\n        settimeTest(event.target.value);\r\n        console.log(timeTest)\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">minutes</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={timeTest}\r\n                    onChange={handleChange}\r\n                >\r\n                    {minutes.map(min => \r\n                        <MenuItem key={min.toString()}> {min}</MenuItem>\r\n                    )\r\n\r\n                    }\r\n                    \r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Hours</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={timeTest}\r\n                    placeholder= \"0\"\r\n                    onChange={handleChange}\r\n                >\r\n                    {minutes.map(min => \r\n                        <MenuItem key={min.toString()}> {min}</MenuItem>\r\n                    )\r\n\r\n                    }\r\n                    \r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Days</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={timeTest}\r\n                    onChange={handleChange}\r\n                >\r\n                    {minutes.map(min => \r\n                        <MenuItem key={min.toString()}> {min}</MenuItem>\r\n                    )\r\n\r\n                    }\r\n                    \r\n                </Select>\r\n            </FormControl>\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\UrlInput.js",["77","78"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ShowWebPage from './ShowWebPage';\r\nimport CropImage from './CropImage';\r\nimport TakeScreenShotPuppeter from './TakeScreenShotPuppeter';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function UrlInput() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <TextField id=\"filled-basic\" label=\"Url\" variant=\"outlined\"  />\r\n            <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\r\n\r\n\r\n<div>\r\n  <TakeScreenShotPuppeter/> \r\n</div>\r\n<div>\r\n  <CropImage/>    \r\n</div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\ShowWebPage.js",["79","80","81","82","83"],"import JsoupService from '../Service/JsoupService'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TextField, Button, Typography, Grid} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport ProgressIndicator from '../Utils/ProgressIndicator';\r\nimport CropImage from './CropImage';\r\nimport CropImageV2 from './CropImageV2';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        marginLeft: theme.spacing(5),\r\n        marginRight: theme.spacing(5),\r\n        padding: theme.spacing(5),\r\n        margin: 'auto',\r\n        variant: 'outlined'\r\n        //talla papel\r\n\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '100ch',\r\n    },\r\n}));\r\n\r\nexport default function ShowWebPage(props) {\r\n    const classes = useStyles();\r\n    const [screenShot, setscreenShot] = useState(null)\r\n    const [url, setUrl] = useState(null)\r\n    const [isLoading, setisLoading] = useState(true)\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    const takeScreenShot = (_url) => {\r\n        setisLoading(!isLoading)\r\n        console.log(\"isloading\")\r\n        console.log(isLoading)\r\n        axios.get(\"http://localhost:4000/screenshot?url=\" + url, { responseType: \"blob\" })\r\n            .then(function (response) {\r\n                var reader = new window.FileReader();\r\n                reader.readAsDataURL(response.data);\r\n                reader.onload = function () {\r\n                    var imageDataUrl = reader.result;\r\n                    setscreenShot(imageDataUrl)\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        takeScreenShot(url);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Paper className={classes.paper}>\r\n                <Grid container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n\r\n\r\n                    <Grid item xs={12}>\r\n                        <Typography >\r\n                            1. Insérez l'url que vous souhaitez surveiller\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} spacing={3}>\r\n                        <form noValidate autoComplete=\"off\" onSubmit={handleSubmit} >\r\n                            <TextField id=\"outlined-size-normal\"\r\n                                className={classes.textField}\r\n                                label=\"Url\"\r\n                                variant=\"outlined\"\r\n                                onChange={e => setUrl(e.target.value)} />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={takeScreenShot}>\r\n                                Commencer\r\n                            </Button>\r\n                        </form>\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <LinearProgress variant=\"determinate\" value={progress} />\r\n\r\n\r\n\r\n                    {screenShot &&\r\n                        <>\r\n                            <Grid item xs={12}>\r\n                                <Typography >\r\n                                    2. Sélectionner la zone\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} />\r\n                                <CropImageV2 src={screenShot} url={url} />\r\n                            <Grid />\r\n                        </>\r\n                    }\r\n\r\n                </Grid>\r\n\r\n            </Paper>\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\TakeScreenShotPuppeter.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImage.js",["84","85","86","87","88","89","90","91"],"import { Button } from '@material-ui/core';\r\nimport React, { useState, useCallback } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport ReactCrop, { makeAspectCrop } from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\nimport ImageCard from './Cards'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nclass CropImage extends React.Component {\r\n\r\n  state = {\r\n    src: null,\r\n    images: [],\r\n    crop: {\r\n      x: 10,\r\n      y: 10,\r\n      width: 100,\r\n      height: 100\r\n    }\r\n  };\r\n\r\n  onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\r\n        \"load\",\r\n        () =>\r\n          this.setState({\r\n            src: reader.result\r\n          }),\r\n        false\r\n      );\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  onImageLoaded = (image) => {\r\n    this.imageRef = image;\r\n    console.log(\"onCropComplete\", image);\r\n  };\r\n\r\n  onCropComplete = (crop) => {\r\n    this.makeClientCrop(crop);\r\n    console.log(\"onCropComplete\", crop);\r\n  };\r\n\r\n  showSelections = () => {\r\n    for (let index = 0; index < this.state.images.length; index++) {\r\n      return\r\n    }\r\n  }\r\n\r\n  confirmImage = () => {\r\n    this.state.images.push(this.state.crop);\r\n    console.log(this.state.images.length);\r\n    console.log(this.state.images[this.state.images.length - 1])\r\n    if (this.state.images.length > 1) {\r\n      if (this.state.images[0] === this.state.images[1]) {\r\n        console.log(\"identicals\")\r\n      }\r\n      else {\r\n        console.log(\"non identicals\")\r\n      }\r\n    }\r\n    return <ImageCard src={this.state.images[0]} />\r\n  }\r\n\r\n  onCropChange = (crop) => {\r\n    this.setState({ crop });\r\n  };\r\n\r\n  async makeClientCrop(crop) {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.getCroppedImg(\r\n        this.imageRef,\r\n        crop,\r\n        'newFile.jpeg'\r\n      );\r\n      this.setState({ croppedImageUrl });\r\n    }\r\n  }\r\n\r\n  //show image in canvas\r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement('canvas');\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob(blob => {\r\n        if (!blob) {\r\n          //reject(new Error('Canvas is empty'));\r\n          console.error('Canvas is empty');\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        window.URL.revokeObjectURL(this.fileUrl);\r\n        this.fileUrl = window.URL.createObjectURL(blob);\r\n        resolve(this.fileUrl);\r\n      }, 'image/jpeg');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { crop, croppedImageUrl, src } = this.state;\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        {this.props.src && (\r\n          <ReactCrop\r\n            src={this.props.src}\r\n            crop={this.state.crop}\r\n            ruleOfThirds\r\n            onImageLoaded={this.onImageLoaded}\r\n            onComplete={this.onCropComplete}\r\n            onChange={this.onCropChange}\r\n            minWidth={500}\r\n            minHeight={120}\r\n          />\r\n        )}\r\n\r\n        {croppedImageUrl && (\r\n          <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n        )}\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" disableElevation onClick={this.confirmImage}>confirm</Button>\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CropImage;\r\n\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\CropImageV2.js",["92","93","94"],"import React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport { TextField, Button, Typography,Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport JsoupService from '../Service/JsoupService';\r\n\r\n\r\nfunction generateDownload(canvas, crop) {\r\n  if (!crop || !canvas) {\r\n    return;\r\n  }\r\n\r\n  canvas.toBlob(\r\n    (blob) => {\r\n      const previewUrl = window.URL.createObjectURL(blob);\r\n\r\n      const anchor = document.createElement('a');\r\n      anchor.download = 'cropPreview.png';\r\n      anchor.href = URL.createObjectURL(blob);\r\n      anchor.click();\r\n\r\n      window.URL.revokeObjectURL(previewUrl);\r\n    },\r\n    'image/png',\r\n    1\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    marginLeft: theme.spacing(5),\r\n    marginRight: theme.spacing(5),\r\n    padding: theme.spacing(5),\r\n    margin: 'auto',\r\n    variant: 'outlined'\r\n    //talla papel\r\n\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: '100ch',\r\n  },\r\n}));\r\n\r\n\r\nexport default function CropImageV2(props) {\r\n  const classes = useStyles();\r\n  const [upImg] = props.src;\r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n  const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n\r\n  const [email, setEmail] = useState(\"\")\r\n  \r\n\r\n  /*const onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () => setUpImg(reader.result));\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };*/\r\n\r\n  const onLoad = useCallback((img) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext('2d');\r\n    const pixelRatio = window.devicePixelRatio;\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    console.log(\"completedCrop\",completedCrop)\r\n    console.log(\"width\",crop.width)\r\n    console.log(\"height\",crop.height)\r\n    console.log(\"crop.x\",crop.x)\r\n    console.log(\"crop.y\",crop.y)\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n  }, [completedCrop]);\r\n\r\n  const saveInformation = async() =>{\r\n  \r\n    await JsoupService.saveInfoCrop(crop, props.url,\"carlos@test\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <ReactCrop\r\n        src={props.src}\r\n        onImageLoaded={onLoad}\r\n        crop={crop}\r\n        onChange={(c) => setCrop(c)}\r\n        onComplete={(c) => setCompletedCrop(c)}\r\n      />\r\n      <div>\r\n        <canvas\r\n          ref={previewCanvasRef}\r\n          // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\r\n          style={{\r\n            width: Math.round(completedCrop?.width ?? 0),\r\n            height: Math.round(completedCrop?.height ?? 0)\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <Button\r\n        type=\"button\"\r\n        disabled={!completedCrop?.width || !completedCrop?.height}\r\n        onClick={() =>\r\n          saveInformation()\r\n        }\r\n      >\r\n       save crop\r\n        </Button>\r\n\r\n      <Button\r\n        type=\"button\"\r\n        disabled={!completedCrop?.width || !completedCrop?.height}\r\n        onClick={() =>\r\n          generateDownload(previewCanvasRef.current, completedCrop)\r\n        }\r\n      >\r\n        Download cropped image\r\n        </Button>\r\n\r\n        <Grid item xs={12}>\r\n                        <Typography >\r\n                            1. Insérez l'url que vous souhaitez surveiller\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n      <TextField id=\"outlined-size-normal\"\r\n        className={classes.textField}\r\n        label=\"Email\"\r\n        placeholder=\"insert the email to notify\"\r\n        variant=\"outlined\"\r\n        onChange={e => setEmail(e.target.value)} />\r\n\r\n      <TextField id=\"outlined-size-normal\"\r\n        className={classes.textField}\r\n        label=\"Email\"\r\n        placeholder=\"insert the email to notify\"\r\n        variant=\"outlined\"\r\n        onChange={e => setEmail(e.target.value)} />\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Service\\JsoupService.js",["95"],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\Utils\\ProgressIndicator.js",[],"C:\\Users\\18229\\IdeaProjects\\page-watcher\\front-end\\src\\components\\Cards.js",["96","97","98","99","100","101","102","103"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500],\r\n  },\r\n}));\r\n\r\nexport default function ImageCard(props) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  console.log(props)\r\n\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            R\r\n          </Avatar>\r\n        }\r\n        action={\r\n          <IconButton aria-label=\"settings\">\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        }\r\n        title=\"image\"\r\n        subheader= \"date image\"\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n\r\n        image={props.src}\r\n        title=\"image\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          image to monitoring\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":12},{"ruleId":"108","severity":1,"message":"112","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":16},{"ruleId":"108","severity":1,"message":"113","line":19,"column":8,"nodeType":"110","messageId":"111","endLine":19,"endColumn":18},{"ruleId":"108","severity":1,"message":"114","line":1,"column":27,"nodeType":"110","messageId":"111","endLine":1,"endColumn":38},{"ruleId":"108","severity":1,"message":"115","line":1,"column":40,"nodeType":"110","messageId":"111","endLine":1,"endColumn":46},{"ruleId":"108","severity":1,"message":"116","line":1,"column":48,"nodeType":"110","messageId":"111","endLine":1,"endColumn":57},{"ruleId":"108","severity":1,"message":"117","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":22},{"ruleId":"108","severity":1,"message":"118","line":20,"column":7,"nodeType":"110","messageId":"111","endLine":20,"endColumn":12},{"ruleId":"108","severity":1,"message":"118","line":27,"column":12,"nodeType":"110","messageId":"111","endLine":27,"endColumn":17},{"ruleId":"108","severity":1,"message":"119","line":27,"column":19,"nodeType":"110","messageId":"111","endLine":27,"endColumn":26},{"ruleId":"108","severity":1,"message":"120","line":28,"column":12,"nodeType":"110","messageId":"111","endLine":28,"endColumn":15},{"ruleId":"108","severity":1,"message":"121","line":28,"column":17,"nodeType":"110","messageId":"111","endLine":28,"endColumn":23},{"ruleId":"108","severity":1,"message":"122","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":19},{"ruleId":"108","severity":1,"message":"123","line":18,"column":11,"nodeType":"110","messageId":"111","endLine":18,"endColumn":18},{"ruleId":"108","severity":1,"message":"124","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":20},{"ruleId":"108","severity":1,"message":"116","line":2,"column":17,"nodeType":"110","messageId":"111","endLine":2,"endColumn":26},{"ruleId":"108","severity":1,"message":"125","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":25},{"ruleId":"108","severity":1,"message":"126","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":17},{"ruleId":"108","severity":1,"message":"127","line":37,"column":22,"nodeType":"110","messageId":"111","endLine":37,"endColumn":33},{"ruleId":"108","severity":1,"message":"128","line":2,"column":17,"nodeType":"110","messageId":"111","endLine":2,"endColumn":25},{"ruleId":"108","severity":1,"message":"114","line":2,"column":27,"nodeType":"110","messageId":"111","endLine":2,"endColumn":38},{"ruleId":"108","severity":1,"message":"129","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":16},{"ruleId":"108","severity":1,"message":"130","line":4,"column":21,"nodeType":"110","messageId":"111","endLine":4,"endColumn":35},{"ruleId":"108","severity":1,"message":"131","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":12},{"ruleId":"108","severity":1,"message":"132","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":13},{"ruleId":"108","severity":1,"message":"133","line":122,"column":13,"nodeType":"110","messageId":"111","endLine":122,"endColumn":17},{"ruleId":"108","severity":1,"message":"134","line":122,"column":36,"nodeType":"110","messageId":"111","endLine":122,"endColumn":39},{"ruleId":"108","severity":1,"message":"135","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":13},{"ruleId":"108","severity":1,"message":"136","line":53,"column":10,"nodeType":"110","messageId":"111","endLine":53,"endColumn":15},{"ruleId":"108","severity":1,"message":"137","line":59,"column":10,"nodeType":"110","messageId":"111","endLine":59,"endColumn":15},{"ruleId":"108","severity":1,"message":"138","line":17,"column":19,"nodeType":"110","messageId":"111","endLine":17,"endColumn":25},{"ruleId":"108","severity":1,"message":"139","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":12},{"ruleId":"108","severity":1,"message":"140","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":19},{"ruleId":"108","severity":1,"message":"141","line":9,"column":8,"nodeType":"110","messageId":"111","endLine":9,"endColumn":16},{"ruleId":"108","severity":1,"message":"142","line":14,"column":8,"nodeType":"110","messageId":"111","endLine":14,"endColumn":20},{"ruleId":"108","severity":1,"message":"143","line":15,"column":8,"nodeType":"110","messageId":"111","endLine":15,"endColumn":17},{"ruleId":"108","severity":1,"message":"144","line":16,"column":8,"nodeType":"110","messageId":"111","endLine":16,"endColumn":22},{"ruleId":"108","severity":1,"message":"145","line":44,"column":10,"nodeType":"110","messageId":"111","endLine":44,"endColumn":18},{"ruleId":"108","severity":1,"message":"146","line":44,"column":20,"nodeType":"110","messageId":"111","endLine":44,"endColumn":31},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'UrlInput' is defined but never used.","'AddBoxIcon' is defined but never used.","'useCallback' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'FormHelperText' is defined but never used.","'hours' is assigned a value but never used.","'sethour' is assigned a value but never used.","'day' is assigned a value but never used.","'setday' is assigned a value but never used.","'ShowWebPage' is defined but never used.","'classes' is assigned a value but never used.","'JsoupService' is defined but never used.","'ProgressIndicator' is defined but never used.","'CropImage' is defined but never used.","'setProgress' is assigned a value but never used.","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'makeAspectCrop' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'crop' is assigned a value but never used.","'src' is assigned a value but never used.","'axios' is defined but never used.","'upImg' is assigned a value but never used.","'email' is assigned a value but never used.","'buffer' is assigned a value but never used.","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'FavoriteIcon' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]